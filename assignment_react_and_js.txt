Module-2 Advance Javascript

2]What is JavaScript Output method?
=>JavaScript Output defines the ways to display the output of a given code. The output can be display by using four different ways which are listed below: innerHTML: It is used to access an element. It defines the HTML content.

3]How to used JavaScript Output method?
=><html>
<body>

<h1>My First Web Page</h1>
<p>My First Paragraph</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html>

MODULE-3
-----REACT JS----------------

1]What Is React Js?
=>React is one kind of js framewrok which is used in frontend..
=>React is a JavaScript library for building user interfaces. Learn what React is all about on our homepage or in the tutorial.

2]Whatis npm in React js?
=>npm is node package manager....
which is used to set up our React project.
You can install package from npm and used in your Project..

3]What is Role of Node js in Reactjs?
=>Node is the most popular platform for hosting and running web servers for React apps.

4]What is CLI?
=>A command-line interface (CLI) is a text-based user interface (UI) used to run programs, manage computer files and interact with the computer..

5]What is Components in React Js?
=>Components in React basically return a piece of JSX code that tells what should be rendered on the screen. In React, we mainly have two types of components: Functional Components: Functional components are simply javascript functions. We can create a functional component in React by writing a javascript function

6]What is Header and Content Components in React Js?
=>


7]How to install React Js on Windows, linux Operating System? How 
to install NPM and How to check version of NPM?
=>To install React There fore downlaod npm which is node package manager and then its added to your project...'

to check version of npm you sholud give command :npm -v;

8]How to check version of React Js?
=>npm view react version.


------------------------------------------------

Lists and Hooks


Given the code below, we use the map() function to take an array of numbers and double their values. We assign the new array returned by map() to the variable doubled and log it:

const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map((number) => number * 2);
console.log(doubled);

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <li>{number}</li>
  );
  return (
    <ul>{listItems}</ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<NumberList numbers={numbers} />);



--------------------------HOOKS\----------------------

import React from 'react';
import ReactDOM from 'react-dom/client';
import { act } from 'react-dom/test-utils';
import Counter from './Counter';

let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('can render and update a counter', () => {
  // Test first render and effect
  act(() => {
    ReactDOM.createRoot(container).render(<Counter />);
  });
  const button = container.querySelector('button');
  const label = container.querySelector('p');
  expect(label.textContent).toBe('You clicked 0 times');
  expect(document.title).toBe('You clicked 0 times');

  // Test second render and effect
  act(() => {
    button.dispatchEvent(new MouseEvent('click', {bubbles: true}));
  });
  expect(label.textContent).toBe('You clicked 1 times');
  expect(document.title).toBe('You clicked 1 times');
});